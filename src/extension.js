// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const fs = require('fs')
const vscode = require('vscode')

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed

/**
 * @param {vscode.ExtensionContext} context
 */
function activate (context) {
  // Use the console to output diagnostic information (console.log) and errors (console.error)
  // This line of code will only be executed once when your extension is activated
  console.log('Congratulations, your extension "letytools" is now active!')

  // The command has been defined in the package.json file
  // Now provide the implementation of the command with  registerCommand
  // The commandId parameter must match the command field in package.json
  let disposable = vscode.commands.registerCommand(
    'letytools.helloWorld',
    function () {
      // The code you place here will be executed every time your command is executed

      // Display a message box to the user
      vscode.window.showInformationMessage(
        'Hello World from lety_flutter_tool!'
      )
    }
  )

  let makeFolder = vscode.commands.registerCommand(
    'letytools.generateFolder',
    async function () {
      // 입력 박스를 열어서
      let result = vscode.window.showInputBox({
        title: 'Type the name of new directory',
        prompt: ''
      })

      // 입력을 받는다.
      let value = await result.then(
        function (value) {
          return value
        },
        function (reason) {
          vscode.window.showErrorMessage(
            `folder generation canceled : ${reason}`
          )
          return '????'
        }
      )

      if (value === '????') {
        return
      }

      if (value === '' || value === undefined) {
        vscode.window.showErrorMessage(
          `folder generation canceled : empty input`
        )
      }

      console.log(value)

      // 열린 워크스페이스가 없으면 그냥 닫는다.
      let workspaceName = vscode.workspace.name
      if (workspaceName === undefined) {
        vscode.window.showInformationMessage('need workspace!')
        return
      }

      // 워크 스페이스 목록에서 선택한다.
      let wsfolders = vscode.workspace.workspaceFolders

      var pickedWs
      var pickedWsIndex

      if (wsfolders.length == 1) {
        // 만약 열린 워크스페이스가 하나라면 그걸 고른다.
        pickedWs = wsfolders[0]
        pickedWsIndex = 0
      } else {
        pickedWs = await vscode.window.showQuickPick(
          wsfolders.map((value, _index, __array) => {
            pickedWsIndex = value.index
            return value.name
          })
        )
      }

      console.log(pickedWs)
      console.log(pickedWsIndex)

      // 해당 폴더가 플러터 프로젝트이면.

      let ws = wsfolders[pickedWsIndex]

      let path = ws.uri.fsPath
      console.log(path)

      let folderPath = `${path}/lib/${value}`
      // 폴더를 만들고
      fs.mkdirSync(folderPath, 0o766)
      fs.writeFileSync(
        `${folderPath}/${value}.dart`,
        '// This file is generated by letytools'
      )
    }
  )

  context.subscriptions.push(disposable, makeFolder)
}

// this method is called when your extension is deactivated
function deactivate () {}

module.exports = {
  activate,
  deactivate
}
